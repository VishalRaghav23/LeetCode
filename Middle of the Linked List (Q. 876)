  Q. Given the head of a singly linked list, return the middle node of the linked list.  If there are two middle nodes, return the second middle node.
     Eg. Input: head = [1,2,3,4,5]
         Output: [3,4,5]
  
  
  public ListNode middleNode(ListNode head) {
        int count = 0;
        int mid = 0;
        ListNode curr = head;
        
        // finding size of the list
        while(curr.next != null){
            curr = curr.next;
            count++;
        }
        
        // even and odd size
        if(count % 2 == 0)
            mid = count / 2;
        else
            mid = (count / 2) + 1;
        
        for(int i = 0; i < mid; i++){
            head = head.next;
        }
        return head;
    }
